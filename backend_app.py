# -*- coding: utf-8 -*-
"""backend_app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/154juibJOmlTHyDrco5juF2Fdyucokmeb
"""

# backend_app.py
from flask import Flask, request, jsonify, abort
from ultralytics import YOLO
import rasterio
import os
import werkzeug.utils

# Inicializa a aplicação Flask
app = Flask(__name__)

# Carrega seu modelo treinado.
# O Dockerfile garantirá que este arquivo esteja na mesma pasta.
print("Carregando o modelo YOLOv8...")
model = YOLO('best.pt')
print("✅ Modelo carregado com sucesso.")


@app.route('/analyze_geotiff', methods=['POST'])
def analyze():
    # Verifica se um arquivo foi enviado na requisição
    if 'file' not in request.files:
        abort(400, description="Nenhum arquivo enviado.")

    file = request.files['file']

    if file.filename == '':
        abort(400, description="Nenhum arquivo selecionado.")

    # Garante que o nome do arquivo é seguro
    filename = werkzeug.utils.secure_filename(file.filename)
    temp_path = os.path.join("./", filename)
    file.save(temp_path)

    print(f"Analisando o arquivo: {filename}")
    detections_data = []

    try:
        # Roda a detecção do YOLO na imagem salva temporariamente
        results = model(temp_path)

        # Usa a biblioteca Rasterio para abrir o GeoTIFF e ler os metadados
        with rasterio.open(temp_path) as src:
            for r in results:
                for box in r.boxes:
                    # Extrai as coordenadas da caixa em pixels
                    x1, y1, x2, y2 = [int(i) for i in box.xyxy[0]]
                    center_x = (x1 + x2) / 2
                    center_y = (y1 + y2) / 2

                    # A mágica: converte o centro do pixel para coordenadas geográficas
                    lon, lat = src.transform * (center_x, center_y)

                    # Adiciona os dados à nossa lista de resultados
                    detections_data.append({
                        'tipo_falha': model.names[int(box.cls[0])],
                        'confianca': f"{float(box.conf[0]):.2%}",
                        'latitude': lat,
                        'longitude': lon
                    })
        print(f"✅ Análise concluída. {len(detections_data)} falhas encontradas.")

    except Exception as e:
        print(f"❌ Erro durante a análise: {e}")
        abort(500, description="Erro ao processar o arquivo de imagem.")

    finally:
        # Garante que o arquivo temporário seja sempre removido
        if os.path.exists(temp_path):
            os.remove(temp_path)

    # Retorna a lista de detecções em formato JSON
    return jsonify(detections_data)

if __name__ == '__main__':
    # O host='0.0.0.0' é importante para que seja acessível externamente
    app.run(host='0.0.0.0', port=8080)